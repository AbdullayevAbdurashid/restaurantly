{"version":3,"sources":["components/waiters/back.jpg","components/waiters/sounds/neworder.mp3","components/waiters/sounds/complete.mp3","components/waiters/sounds/waitercalling.mp3","components/waiters/waiters.jsx"],"names":["TabPane","Tabs","useStyles","makeStyles","theme","root","maxWidth","media","height","paddingTop","expand","transform","marginLeft","marginBottom","transition","transitions","create","duration","shortest","expandOpen","StyledBadge","withStyles","badge","right","top","border","palette","background","paper","padding","Badge","Waiter","user","useAuth","useContext","IpContext","ip","socket","useState","myorder","setOrder","data","setData","expanded","setExpanded","expandedOrder","setExpandedOrder","useEffect","on","message","length","Audio","neworder","play","warning","addNotification","title","subtitle","native","a","axios","get","reverse","table","waiter","complete","success","notifyOrderTaken","responsibleWaiter","call","Modal","info","content","onOk","duraction","setInterval","setTimeout","clearInterval","emit","notifyWaiterCalling","React","confirmLoading","setConfirmLoading","classes","handleOk","post","name","then","setVisible","getOrder","setVisibleConfirm","index","visible","localStorage","getItem","style","backgroundImage","backgound","backgroundRepeat","backgroundSize","className","Container","defaultActiveKey","centered","tab","map","obj","Grow","in","Card","CardContent","Number","time","split","Date","getHours","getMinutes","foods","CardActions","disableSpacing","IconButton","clsx","onClick","isExpanded","handleExpandClick","fontSize","onConfirm","okButtonProps","loading","onCancel","motion","button","whileTap","scale","type","Collapse","timeout","unmountOnExit","foodObj","indx","Divider","showZero","badgeContent","color","Ribbon","status","text","handleExpandOrder","Fab","position","bottom","setItem","window","location","reload","to"],"mappings":"iSAAe,MAA0B,iC,uKCA1B,MAA0B,qCCA1B,MAA0B,qCCA1B,MAA0B,0C,OCkCjCA,EAAYC,IAAZD,QAIFE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,KAEdC,MAAO,CACHC,OAAQ,EACRC,WAAY,UAEhBC,OAAQ,CACJC,UAAW,eACXC,WAAY,OACZC,aAAc,MACdC,WAAYV,EAAMW,YAAYC,OAAO,YAAa,CAC9CC,SAAUb,EAAMW,YAAYE,SAASC,YAG7CC,WAAY,CACRR,UAAW,sBAIbS,EAAcC,aAAW,SAACjB,GAAD,MAAY,CACvCkB,MAAO,CACHC,OAAQ,EACRC,IAAK,GACLC,OAAO,aAAD,OAAerB,EAAMsB,QAAQC,WAAWC,OAC9CC,QAAS,YALGR,CAOhBS,KAgXWC,UAnWf,WACI,IAAQC,EAASC,cAATD,KACR,EAAqBE,qBAAWC,KAAhC,mBAAOC,EAAP,KAAWC,EAAX,KAGA,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAgBC,EAAhB,KAiBA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,GAAjB,KACA,GAA0CN,oBAAS,GAAnD,qBAAOO,GAAP,MAAsBC,GAAtB,MAoEAC,qBAAU,WACNV,EAAOW,GAAG,iBAAiB,SAACC,GACR,SAAZA,EAzDe,IAAnBV,EAAQW,SACI,IAAIC,MAAMC,GAChBC,OACNJ,IAAQK,QAAQ,uBAyDRL,IAAYjB,IAvEZ,IAAImB,MAAMC,GAChBC,OACNE,IAAgB,CACZC,MAAO,cACPC,SAAS,uCACTrD,MAAO,WACPsD,QAAQ,IAEZT,IAAQK,QAAQ,wCAiEJ,sBAAC,8BAAAK,EAAA,sEAC0BC,IAAMC,IAAN,UAAazB,EAAb,yBAAgCJ,IAD1D,iBACWS,EADX,EACWA,MACHqB,UACLtB,EAASC,GAHZ,0CAAD,IAQR,sBAAC,8BAAAkB,EAAA,sEAC0BC,IAAMC,IAAN,UAAazB,EAAb,sBAD1B,iBACWK,EADX,EACWA,MACHqB,UACLpB,EAAQD,GAHX,0CAAD,MAOJJ,EAAOW,GAAG,cAAc,aArEH,SAACe,EAAOC,GACzBA,IAAWhC,IACC,IAAImB,MAAMc,GAChBZ,OACNJ,IAAQiB,QAAR,UAAmBH,EAAnB,6BACAR,IAAgB,CACZC,MAAO,eACPC,SAAS,GAAD,OAAKM,EAAL,4BACR3D,MAAO,WACPsD,QAAQ,KAgEZS,CAJsD,EAA/BJ,MAA+B,EAAxBK,sBAQlC/B,EAAOW,GAAG,UAAU,aA/DI,SAACe,EAAOC,GAChC,GAAIA,IAAWhC,EAAM,CACjBuB,IAAgB,CACZC,MAAO,uBACPC,SAAS,GAAD,OAAKM,EAAL,gCACR3D,MAAO,WACPsD,QAAQ,IAEA,IAAIP,MAAMkB,GAChBhB,OACNiB,IAAMC,KAAK,CACPf,MAAO,uBACPgB,QACI,8BACI,8BAAIT,EAAJ,qCAGRU,KAPO,eASX,IAAIC,EAAYC,aAAY,WACZ,IAAIxB,MAAMkB,GAChBhB,SACP,KAEHuB,YAAW,WACPC,cAAcH,GACdrC,EAAOyC,KAAK,MACb,MAsCHC,CAFkD,EAA/BhB,MAA+B,EAAxBK,sBAK9B,sBAAC,8BAAAT,EAAA,sEAC0BC,IAAMC,IAAN,UAAazB,EAAb,sBAD1B,iBACWK,EADX,EACWA,MACHqB,UACLpB,EAAQD,GAHX,0CAAD,GAOA,sBAAC,8BAAAkB,EAAA,sEAC0BC,IAAMC,IAAN,UAAazB,EAAb,yBAAgCJ,IAD1D,iBACWS,EADX,EACWA,MACHqB,UACLtB,EAASC,GAHZ,0CAAD,GAhJJ6B,IAAMC,KAAK,CACPf,MAAO,wBACPgB,QACI,8BACI,sEAGRC,KAPO,iBAuJR,IACH,OAA4CO,IAAM1C,UAAS,GAA3D,qBAAO2C,GAAP,MAAuBC,GAAvB,MAMMC,GAAUjF,IACVkF,GAAW,SAACrB,GACdmB,IAAkB,GAhJL,SAACnB,GACdH,IAAMyB,KAAN,UAAcjD,EAAd,gBAAgC,CAAE2B,MAAOA,EAAOuB,KAAMtD,IAAQuD,MAAK,WAC/D3B,IAAMC,IAAN,UAAazB,EAAb,yBAAgCJ,IAAQuD,MAAK,YAAe,IAAZ9C,EAAW,EAAXA,KAC5CD,EAASC,MAGbmB,IAAMC,IAAN,UAAazB,EAAb,sBAAoCmD,MAAK,YAAe,IAAZ9C,EAAW,EAAXA,KACxCC,EAAQD,GACR+C,IAAW,GACXN,IAAkB,SAwI1BO,CAAS1B,IAUP2B,GAAoB,SAACC,GACvBH,GAAW,2BAAKI,IAAN,kBAAgBD,GAASC,GAAQD,OAI/C,GAA8BrD,oBAAS,GAAvC,qBAAOsD,GAAP,MAAgBJ,GAAhB,MACA,MAAwC,UAApCK,aAAaC,QAAQ,YAA2BD,aAAaC,QAAQ,WAMrE,sBAAKC,MAAO,CAAEC,gBAAgB,OAAD,OAASC,EAAT,KAAuBpF,aAAc,OAAQqF,iBAAkB,YAAaC,eAAgB,SAAWC,UAAU,wBAA9I,UAEI,cAACC,EAAA,EAAD,CAAW/F,SAAS,KAAK8F,UAAU,kDAAnC,SAGI,qBAAKA,UAAU,+BAAf,SACI,eAAC,IAAD,CAAME,iBAAiB,IAAIC,UAAQ,EAAnC,UACI,cAACvG,EAAD,CAASoG,UAAU,cAAcI,IAAI,iBAArC,SAEK/D,GACGA,EAAKgE,KAAI,SAACC,EAAKf,GAAN,OAEL,cAACgB,EAAA,EAAD,CAAMC,IAAI,EAAV,SACI,eAACC,EAAA,EAAD,CAAMT,UAAU,OAAhB,UACI,eAACU,EAAA,EAAD,WACI,qBAAIV,UAAU,oCAAd,oBACY3D,EAAKS,OAASyC,KAE1B,qBAAIS,UAAU,sCAAd,UACMW,OAAOL,EAAIM,KAAKC,MAAM,KAAK,KAAM,IAAIC,MAAOC,aAAgB,GAAK,IAAID,MAAOE,aAAeL,OAAOL,EAAIM,KAAKC,MAAM,KAAK,IAAO,cAAgB,IAAIC,MAAOC,WAAaJ,OAAOL,EAAIM,KAAKC,MAAM,KAAK,IAAO,cAD7M,mDAEA,qBAAIb,UAAU,6DAAd,mBACWM,EAAI3C,SAEf,qBAAIqC,UAAU,iCAAd,0BACkB3D,EAAKkD,GAAO0B,MAAMnE,aAIxC,eAACoE,EAAA,EAAD,CAAaC,gBAAc,EAA3B,UAEI,oBAAInB,UAAU,iCAAd,sBAGA,uBAAMA,UAAU,eAAhB,UACI,cAACoB,EAAA,EAAD,CACIpB,UAAWqB,YAAKtC,GAAQzE,OAAT,eACVyE,GAAQhE,WAAawB,EAASgD,GACzBhD,EAASgD,GAAS,OAE5B+B,QAAS,kBAzDnC,SAAC/B,EAAOgC,GAC9B/E,GAAY,2BAAKD,GAAN,kBAAiBgD,GAAShD,EAASgD,MAwDiBiC,CAAkBjC,IACjC,gBAAehD,EACf,aAAW,YAPf,SASI,cAAC,IAAD,CAAgByD,UAAU,mBAAmByB,SAAS,YAE1D,cAAC,IAAD,CACIrE,MAAM,kBACNoC,QAASA,GAAQD,GACjBmC,UAAW,kBAAM1C,GAASsB,EAAI3C,QAC9BgE,cAAe,CAAEC,QAAS/C,IAC1BgD,SAAU,kBAAMvC,GAAkBC,IALtC,SAOI,cAACuC,EAAA,EAAOC,OAAR,CACIC,SAAU,CAAEC,MAAO,IACnBX,QAAS,kBAAMhC,GAAkBC,IACjCS,UAAU,mLAAmLkC,KAAK,SAHtM,kCASZ,cAACC,EAAA,EAAD,CAAU3B,GAAIjE,EAASgD,GACjBhD,EAASgD,GAAS,KACtB6C,QAAQ,OAAOC,eAAa,EAF9B,SAIQhG,EAAKkD,GAAO0B,MAAMZ,KAAI,SAACiC,EAASC,GAAV,OAClB,cAAC7B,EAAA,EAAD,UACI,gCACI,iCACI,mBAAGV,UAAU,iCAAb,SAA+CsC,EAAQpD,OACvD,cAACsD,EAAA,EAAD,CAAS7C,MAAO,CAAEpE,WAAY,cAClC,oBAAIyE,UAAU,2BAAd,oBAJMuC,mBA5DY,KAgF1D,cAAC3I,EAAD,CAASwG,IAAK,cAACpF,EAAD,CAAayH,UAAQ,EAACC,aAAcvG,EAAQW,OAAQ6F,MAAM,YAA1D,SACV,oBAAI3C,UAAU,oBAAd,yBADJ,SAMK7D,GACGA,EAAQkE,KAAI,SAACC,EAAKf,GAAN,OAER,cAACgB,EAAA,EAAD,CAAMC,IAAI,EAAV,SACI,cAAC,IAAMoC,OAAP,CAAcD,MAAsB,YAAfrC,EAAIuC,OAAuB,UAAY,QAASC,KAAqB,YAAfxC,EAAIuC,OAAuB,cAAgB,WAAtH,SAEI,eAACpC,EAAA,EAAD,CAAMT,UAAU,OAAhB,UACI,eAACU,EAAA,EAAD,WACI,qBAAIV,UAAU,oCAAd,oBACY7D,EAAQW,OAASyC,KAE7B,qBAAIS,UAAU,qCAAd,UACMW,OAAOL,EAAIM,KAAKC,MAAM,KAAK,KAAM,IAAIC,MAAOC,aAAgB,GAAK,IAAID,MAAOE,aAAeL,OAAOL,EAAIM,KAAKC,MAAM,KAAK,IAAO,cAAgB,IAAIC,MAAOC,WAAaJ,OAAOL,EAAIM,KAAKC,MAAM,KAAK,IAAO,cAD7M,mFAEA,qBAAIb,UAAU,gEAAd,mBACWM,EAAI3C,SAGf,qBAAIqC,UAAU,iCAAd,0BACkB7D,EAAQoD,GAAO0B,MAAMnE,aAI3C,eAACoE,EAAA,EAAD,CAAaC,gBAAc,EAA3B,UAEI,oBAAInB,UAAU,iCAAd,sBAGA,sBAAMA,UAAU,eAAhB,SACI,cAACoB,EAAA,EAAD,CACIpB,UAAWqB,YAAKtC,GAAQzE,OAAT,eACVyE,GAAQhE,WAAawB,EAASgD,GACzBhD,EAASgD,GAAS,OAE5B+B,QAAS,kBA7IvC,SAAC/B,GACvB7C,GAAiB,2BAAKD,IAAN,kBAAsB8C,GAAS9C,GAAc8C,MA4IMwD,CAAkBxD,IACjC,gBAAehD,EACf,aAAW,YAPf,SASI,cAAC,IAAD,CAAgByD,UAAU,mBAAmByB,SAAS,iBAKlE,cAACU,EAAA,EAAD,CAAU3B,GAAI/D,GAAc8C,GACtB9C,GAAc8C,GAAS,KAC3B6C,QAAQ,OAAOC,eAAa,EAF9B,SAIQlG,EAAQoD,GAAO0B,MAAMZ,KAAI,SAACiC,EAASC,GAAV,OACrB,cAAC7B,EAAA,EAAD,UACI,gCACI,iCACI,mBAAGV,UAAU,iCAAb,SAA+CsC,EAAQpD,OACvD,cAACsD,EAAA,EAAD,CAAS7C,MAAO,CAAEpE,WAAY,cAClC,oBAAIyE,UAAU,2BAAd,oBAJMuC,qBAlD9B,YA4EhC,cAACS,EAAA,EAAD,CAAKrD,MAAO,CAAEsD,SAAU,QAASC,OAAQ,OAAQ/H,MAAO,OACpDwH,MAAM,YAAY,aAAW,MAC7BrB,QAvMS,WACjB7B,aAAa0D,QAAQ,UAAW,SAChCC,OAAOC,SAASC,UAmMZ,SAII,cAAC,IAAD,SA/KJ,cAAC,IAAD,CAAUC,GAAG","file":"static/js/6.0aa70db8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/back.39f25b08.jpg\";","export default __webpack_public_path__ + \"static/media/neworder.b3bc44c8.mp3\";","export default __webpack_public_path__ + \"static/media/complete.7cfd4944.mp3\";","export default __webpack_public_path__ + \"static/media/waitercalling.9e89d866.mp3\";","import React from 'react'\r\nimport { Container } from '@material-ui/core'\r\nimport { Tabs } from 'antd';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport clsx from 'clsx';\r\nimport useAuth from \"../../context/useAuth\"\r\nimport backgound from \"./back.jpg\"\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { motion } from 'framer-motion';\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport { Badge as Fedge } from 'antd';\r\n\r\nimport { Popconfirm, Modal } from 'antd';\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport { message } from 'antd';\r\nimport { IpContext } from \"../../context/ipProvider\"\r\nimport { useContext } from 'react';\r\nimport addNotification from 'react-push-notification';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { Fab } from '@material-ui/core';\r\nimport LazyLoad from 'react-lazyload';\r\nimport { Redirect } from 'react-router';\r\nimport neworder from \"./sounds/neworder.mp3\"\r\nimport complete from \"./sounds/complete.mp3\"\r\nimport call from \"./sounds/waitercalling.mp3\"\r\n\r\nconst { TabPane } = Tabs;\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        marginBottom: \"5px\",\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n\r\n}));\r\nconst StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        right: -3,\r\n        top: 13,\r\n        border: `2px solid ${theme.palette.background.paper}`,\r\n        padding: \"0 4px\",\r\n    },\r\n}))(Badge);\r\n\r\nfunction info() {\r\n    Modal.info({\r\n        title: 'Please accept cookies',\r\n        content: (\r\n            <div>\r\n                <p>Accept cookies to send notification</p>\r\n            </div>\r\n        ),\r\n        onOk() { },\r\n    });\r\n}\r\nfunction Waiter() {\r\n    const { user } = useAuth();\r\n    const [ip, socket] = useContext(IpContext)\r\n\r\n\r\n    const [myorder, setOrder] = useState([])\r\n    const getOrder = (table) => {\r\n        axios.post(`${ip}/occupyOrder`, { table: table, name: user }).then(() => {\r\n            axios.get(`${ip}/waiterOrders/${user}`).then(({ data }) => {\r\n                setOrder(data);\r\n\r\n            });\r\n            axios.get(`${ip}/waiterOrders/new`).then(({ data }) => {\r\n                setData(data);\r\n                setVisible(false);\r\n                setConfirmLoading(false);\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    const [data, setData] = useState([]);\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [expandedOrder, setExpandedOrder] = useState(false);\r\n    const notify = () => {\r\n        let audio = new Audio(neworder)\r\n        audio.play()\r\n        addNotification({\r\n            title: 'Yangi zakaz',\r\n            subtitle: `Yangi zakaz keldi iltimos tekshiring`,\r\n            theme: 'darkblue',\r\n            native: true // when using native, your OS will handle theming.\r\n        });\r\n        message.warning(\"Yangi zakaz keldi iltimos tekshiring\")\r\n    }\r\n    const notifySilent = () => {\r\n        if (myorder.length === 0) {\r\n            let audio = new Audio(neworder)\r\n            audio.play()\r\n            message.warning(\"Yangi zakaz tushdi\")\r\n\r\n        }\r\n\r\n    }\r\n    const notifyOrderTaken = (table, waiter) => {\r\n        if (waiter === user) {\r\n            let audio = new Audio(complete)\r\n            audio.play()\r\n            message.success(`${table}chi stolni zakazi tayyor`)\r\n            addNotification({\r\n                title: 'Zakaz tayyor',\r\n                subtitle: `${table}chi stolni zakazi tayyor`,\r\n                theme: 'darkblue',\r\n                native: true // when using native, your OS will handle theming.\r\n            });\r\n        }\r\n    }\r\n\r\n    const notifyWaiterCalling = (table, waiter) => {\r\n        if (waiter === user) {\r\n            addNotification({\r\n                title: 'Sizni chaqirishyapti',\r\n                subtitle: `${table}- chi stol sizni chaqiryapti`,\r\n                theme: 'darkblue',\r\n                native: true // when using native, your OS will handle theming.\r\n            });\r\n            let audio = new Audio(call)\r\n            audio.play()\r\n            Modal.info({\r\n                title: 'Sizni chaqirishyapti',\r\n                content: (\r\n                    <div>\r\n                        <p>{table} - chi stol sizni chaqiryapti</p>\r\n                    </div>\r\n                ),\r\n                onOk() { },\r\n            });\r\n            let duraction = setInterval(() => {\r\n                let audio = new Audio(call)\r\n                audio.play()\r\n            }, 1000);\r\n\r\n            setTimeout(() => {\r\n                clearInterval(duraction)\r\n                socket.emit(\"\")\r\n            }, 3000);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        socket.on(\"recieve-order\", (message) => {\r\n            if (message === \"none\") {\r\n                notifySilent()\r\n            } else {\r\n                if (message === user) {\r\n                    notify();\r\n                    (async function () {\r\n                        const { data } = await axios.get(`${ip}/waiterOrders/${user}`);\r\n                        data.reverse()\r\n                        setOrder(data);\r\n                    })();\r\n\r\n                }\r\n            }\r\n            (async function () {\r\n                const { data } = await axios.get(`${ip}/waiterOrders/new`);\r\n                data.reverse()\r\n                setData(data);\r\n            })();\r\n        });\r\n\r\n        socket.on(\"take-order\", ({ table, responsibleWaiter }) => {\r\n\r\n\r\n\r\n            notifyOrderTaken(table, responsibleWaiter)\r\n\r\n        });\r\n\r\n        socket.on(\"coming\", ({ table, responsibleWaiter }) => {\r\n\r\n            notifyWaiterCalling(table, responsibleWaiter)\r\n\r\n        });\r\n        (async function () {\r\n            const { data } = await axios.get(`${ip}/waiterOrders/new`);\r\n            data.reverse()\r\n            setData(data);\r\n\r\n        })();\r\n\r\n        (async function () {\r\n            const { data } = await axios.get(`${ip}/waiterOrders/${user}`);\r\n            data.reverse()\r\n            setOrder(data);\r\n\r\n        })();\r\n        info()\r\n    }, []);\r\n    const [confirmLoading, setConfirmLoading] = React.useState(false);\r\n    const handleLogout = () => {\r\n        localStorage.setItem(\"details\", \"false\")\r\n        window.location.reload();\r\n\r\n    }\r\n    const classes = useStyles();\r\n    const handleOk = (table) => {\r\n        setConfirmLoading(true);\r\n        getOrder(table)\r\n    };\r\n\r\n\r\n    const handleExpandClick = (index, isExpanded) => {\r\n        setExpanded({ ...expanded, [index]: !expanded[index] ? true : false });\r\n    };\r\n    const handleExpandOrder = (index) => {\r\n        setExpandedOrder({ ...expandedOrder, [index]: !expandedOrder[index] ? true : false });\r\n    };\r\n    const setVisibleConfirm = (index) => {\r\n        setVisible({ ...visible, [index]: !visible[index] ? true : false });\r\n    };\r\n\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    if (localStorage.getItem(\"details\") === \"false\" || !localStorage.getItem(\"details\"))\r\n        return (\r\n            <Redirect to=\"/login\" />\r\n        );\r\n\r\n    return (\r\n        <div style={{ backgroundImage: `url(${backgound})`, marginBottom: \"30px\", backgroundRepeat: \"no-repeat\", backgroundSize: \"cover\" }} className=\" waiters min-h-screen\">\r\n\r\n            <Container maxWidth=\"md\" className=\" min-h-screen backdrop-filter  backdrop-blur-md\">\r\n\r\n\r\n                <div className=\"text-white bg-image   h-full\">\r\n                    <Tabs defaultActiveKey=\"1\" centered>\r\n                        <TabPane className=\"text-white \" tab=\"Current orders\" key=\"1\">\r\n\r\n                            {data &&\r\n                                data.map((obj, index) => (\r\n\r\n                                    <Grow in={true}>\r\n                                        <Card className=\"mb-4\">\r\n                                            <CardContent>\r\n                                                <h1 className=\"text-yellow-500 text-xl font-bold\">\r\n                                                    ORDER #{data.length - index}\r\n                                                </h1>\r\n                                                <h3 className=\"text-green-400   text-sm font-bold \">\r\n                                                    {(Number(obj.time.split(\":\")[0]) - new Date().getHours()) === 0 ? (new Date().getMinutes() - Number(obj.time.split(\":\")[1])) + \" min oldin\" : (new Date().getHours() - Number(obj.time.split(\":\")[0])) + \" soat oldin\"}                                             </h3>\r\n                                                <h2 className=\"absolute top-4 right-4  text-yellow-500 text-lg font-bold \">\r\n                                                    Stol: {obj.table}\r\n                                                </h2>\r\n                                                <h3 className=\"text-white text-lg font-medium\">\r\n                                                    Jami taomlar:{data[index].foods.length}\r\n                                                </h3>\r\n\r\n                                            </CardContent>\r\n                                            <CardActions disableSpacing>\r\n\r\n                                                <h3 className=\"text-white text-lg font-medium\">\r\n                                                    Taomlar:\r\n                                                </h3>\r\n                                                <span className=\"inline-block\">\r\n                                                    <IconButton\r\n                                                        className={clsx(classes.expand, {\r\n                                                            [classes.expandOpen]: expanded[index]\r\n                                                                ? expanded[index] : null,\r\n                                                        })}\r\n                                                        onClick={() => handleExpandClick(index)}\r\n                                                        aria-expanded={expanded}\r\n                                                        aria-label=\"show more\"\r\n                                                    >\r\n                                                        <ExpandMoreIcon className=\"text-white  mb-1\" fontSize=\"large\" />\r\n                                                    </IconButton>\r\n                                                    <Popconfirm\r\n                                                        title=\"Tasdiqlaysizmi?\"\r\n                                                        visible={visible[index]}\r\n                                                        onConfirm={() => handleOk(obj.table)}\r\n                                                        okButtonProps={{ loading: confirmLoading }}\r\n                                                        onCancel={() => setVisibleConfirm(index)}\r\n                                                    >\r\n                                                        <motion.button\r\n                                                            whileTap={{ scale: 0.9 }}\r\n                                                            onClick={() => setVisibleConfirm(index)}\r\n                                                            className=\"w-24 absolute bottom-4 right-2 bg-gradient-to-r  d from-blue-700 h-10 rounded-xl  text-lg  focus:ring-offset-indigo-800 focus:border-transparent transit to-blue-800  text-white\" type=\"submit\">\r\n                                                            Olish ✅\r\n                                                        </motion.button>\r\n                                                    </Popconfirm>\r\n                                                </span>\r\n                                            </CardActions>\r\n                                            <Collapse in={expanded[index]\r\n                                                ? expanded[index] : null\r\n                                            } timeout=\"auto\" unmountOnExit>\r\n                                                {\r\n                                                    data[index].foods.map((foodObj, indx) => (\r\n                                                        <CardContent>\r\n                                                            <div key={indx}>\r\n                                                                <span>\r\n                                                                    <p className=\" text-white text-xl  uppercase\">{foodObj.name}</p>\r\n                                                                    <Divider style={{ background: \"white\", }} /></span>\r\n                                                                <h2 className=\" text-yellow-400 text-xl\"> 2x </h2>\r\n\r\n                                                            </div>\r\n\r\n\r\n                                                        </CardContent>\r\n                                                    ))}\r\n                                            </Collapse>\r\n                                        </Card>\r\n                                    </Grow>\r\n\r\n                                ))}\r\n\r\n\r\n\r\n                        </TabPane>\r\n                        <TabPane tab={<StyledBadge showZero badgeContent={myorder.length} color=\"secondary\">\r\n                            <h1 className=\"text-white pt-2  \">\r\n                                My orders\r\n                            </h1>\r\n                        </StyledBadge>} key=\"2\">\r\n\r\n                            {myorder &&\r\n                                myorder.map((obj, index) => (\r\n\r\n                                    <Grow in={true}>\r\n                                        <Fedge.Ribbon color={obj.status === \"pending\" ? \"volcano\" : \"green\"} text={obj.status === \"pending\" ? \"Tayyor emas\" : \"Tayyor  \"}>\r\n\r\n                                            <Card className=\"mb-4\">\r\n                                                <CardContent>\r\n                                                    <h1 className=\"text-yellow-500 text-xl font-bold\">\r\n                                                        ORDER #{myorder.length - index}\r\n                                                    </h1>\r\n                                                    <h3 className=\" text-green-400 text-sm font-bold \">\r\n                                                        {(Number(obj.time.split(\":\")[0]) - new Date().getHours()) === 0 ? (new Date().getMinutes() - Number(obj.time.split(\":\")[1])) + \" min oldin\" : (new Date().getHours() - Number(obj.time.split(\":\")[0])) + \" soat oldin\"}                                                                             </h3>\r\n                                                    <h2 className=\"absolute bottom-6 right-4  text-yellow-500 text-lg font-bold \">\r\n                                                        Stol: {obj.table}\r\n                                                    </h2>\r\n\r\n                                                    <h3 className=\"text-white text-lg font-medium\">\r\n                                                        Jami taomlar:{myorder[index].foods.length}\r\n                                                    </h3>\r\n\r\n                                                </CardContent>\r\n                                                <CardActions disableSpacing>\r\n\r\n                                                    <h3 className=\"text-white text-lg font-medium\">\r\n                                                        Taomlar:\r\n                                                    </h3>\r\n                                                    <span className=\"inline-block\">\r\n                                                        <IconButton\r\n                                                            className={clsx(classes.expand, {\r\n                                                                [classes.expandOpen]: expanded[index]\r\n                                                                    ? expanded[index] : null,\r\n                                                            })}\r\n                                                            onClick={() => handleExpandOrder(index)}\r\n                                                            aria-expanded={expanded}\r\n                                                            aria-label=\"show more\"\r\n                                                        >\r\n                                                            <ExpandMoreIcon className=\"text-white  mb-1\" fontSize=\"large\" />\r\n                                                        </IconButton>\r\n\r\n                                                    </span>\r\n                                                </CardActions>\r\n                                                <Collapse in={expandedOrder[index]\r\n                                                    ? expandedOrder[index] : null\r\n                                                } timeout=\"auto\" unmountOnExit>\r\n                                                    {\r\n                                                        myorder[index].foods.map((foodObj, indx) => (\r\n                                                            <CardContent>\r\n                                                                <div key={indx}>\r\n                                                                    <span>\r\n                                                                        <p className=\" text-white text-xl  uppercase\">{foodObj.name}</p>\r\n                                                                        <Divider style={{ background: \"white\", }} /></span>\r\n                                                                    <h2 className=\" text-yellow-400 text-xl\"> 2x </h2>\r\n\r\n                                                                </div>\r\n\r\n\r\n                                                            </CardContent>\r\n                                                        ))}\r\n                                                </Collapse>\r\n                                            </Card>\r\n                                        </Fedge.Ribbon>\r\n                                    </Grow>\r\n                                ))}\r\n\r\n\r\n\r\n\r\n\r\n                        </TabPane>\r\n\r\n                    </Tabs>\r\n                </div>\r\n            </Container >\r\n            <Fab style={{ position: \"fixed\", bottom: \"30px\", right: \"5px\" }}\r\n                color=\"secondary\" aria-label=\"add\"\r\n                onClick={handleLogout}\r\n            >\r\n                <ExitToAppIcon />\r\n            </Fab>\r\n\r\n\r\n\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Waiter\r\n"],"sourceRoot":""}